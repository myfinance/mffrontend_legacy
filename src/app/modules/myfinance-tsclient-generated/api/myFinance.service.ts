/**
 * Dac Services
 * Dac Service REST API
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { DateDoubleModel } from '../model/dateDoubleModel';
import { InstrumentDetailModel } from '../model/instrumentDetailModel';
import { InstrumentListModel } from '../model/instrumentListModel';
import { InstrumentModel } from '../model/instrumentModel';
import { InstrumentPropertyListModel } from '../model/instrumentPropertyListModel';
import { RecurrentTransactionListModel } from '../model/recurrentTransactionListModel';
import { StringListModel } from '../model/stringListModel';
import { TransactionListModel } from '../model/transactionListModel';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MyFinanceService {

    protected basePath = 'https://localhost/dac/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * add Budget
     * 
     * @param envID The Service Environment
     * @param description description
     * @param budgetGroupId the Id of the budgetGroup which the budget is attached to
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addBudget_envID_description_budgetGroupId(envID: string, description?: string, budgetGroupId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addBudget_envID_description_budgetGroupId(envID: string, description?: string, budgetGroupId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addBudget_envID_description_budgetGroupId(envID: string, description?: string, budgetGroupId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addBudget_envID_description_budgetGroupId(envID: string, description?: string, budgetGroupId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling addBudget_envID_description_budgetGroupId.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (budgetGroupId !== undefined && budgetGroupId !== null) {
            queryParameters = queryParameters.set('budgetGroupId', <any>budgetGroupId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/addBudget`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * save Instrument
     * 
     * @param envID The Service Environment
     * @param currencyCode the currencyCode
     * @param description description
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addCurrency_envID_currencyCode_description(envID: string, currencyCode?: string, description?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addCurrency_envID_currencyCode_description(envID: string, currencyCode?: string, description?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addCurrency_envID_currencyCode_description(envID: string, currencyCode?: string, description?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addCurrency_envID_currencyCode_description(envID: string, currencyCode?: string, description?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling addCurrency_envID_currencyCode_description.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (currencyCode !== undefined && currencyCode !== null) {
            queryParameters = queryParameters.set('currencyCode', <any>currencyCode);
        }
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/addCurrency`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * save Equity
     * 
     * @param envID The Service Environment
     * @param isin the isin
     * @param description description
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addEquity_envID_isin_description(envID: string, isin?: string, description?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addEquity_envID_isin_description(envID: string, isin?: string, description?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addEquity_envID_isin_description(envID: string, isin?: string, description?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addEquity_envID_isin_description(envID: string, isin?: string, description?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling addEquity_envID_isin_description.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (isin !== undefined && isin !== null) {
            queryParameters = queryParameters.set('isin', <any>isin);
        }
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/addEquity`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * save Equity with symbols
     * 
     * @param envID The Service Environment
     * @param isin the isin
     * @param description description
     * @param symbols symbols
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addFullEquity_envID_isin_description_symbols(envID: string, isin?: string, description?: string, symbols?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addFullEquity_envID_isin_description_symbols(envID: string, isin?: string, description?: string, symbols?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addFullEquity_envID_isin_description_symbols(envID: string, isin?: string, description?: string, symbols?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addFullEquity_envID_isin_description_symbols(envID: string, isin?: string, description?: string, symbols?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling addFullEquity_envID_isin_description_symbols.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (isin !== undefined && isin !== null) {
            queryParameters = queryParameters.set('isin', <any>isin);
        }
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (symbols) {
            symbols.forEach((element) => {
                queryParameters = queryParameters.append('symbols', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/addFullEquity`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * save Giro
     * 
     * @param envID The Service Environment
     * @param description description
     * @param tenantId the Id of the tenant which the giro is attached to
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addGiro_envID_description_tenantId(envID: string, description?: string, tenantId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addGiro_envID_description_tenantId(envID: string, description?: string, tenantId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addGiro_envID_description_tenantId(envID: string, description?: string, tenantId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addGiro_envID_description_tenantId(envID: string, description?: string, tenantId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling addGiro_envID_description_tenantId.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (tenantId !== undefined && tenantId !== null) {
            queryParameters = queryParameters.set('tenantId', <any>tenantId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/addGiro`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * save Income or Expense
     * 
     * @param envID The Service Environment
     * @param description description
     * @param accId the accountId of the income or expense
     * @param budgetId the budgetId of the income or expense
     * @param value the value of the income or expense
     * @param transactiondate the transactiondate(yyyy-mm-dd
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addIncomeExpense_envID_description_accId_budgetId_value_transactiondate(envID: string, description?: string, accId?: number, budgetId?: number, value?: number, transactiondate?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addIncomeExpense_envID_description_accId_budgetId_value_transactiondate(envID: string, description?: string, accId?: number, budgetId?: number, value?: number, transactiondate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addIncomeExpense_envID_description_accId_budgetId_value_transactiondate(envID: string, description?: string, accId?: number, budgetId?: number, value?: number, transactiondate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addIncomeExpense_envID_description_accId_budgetId_value_transactiondate(envID: string, description?: string, accId?: number, budgetId?: number, value?: number, transactiondate?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling addIncomeExpense_envID_description_accId_budgetId_value_transactiondate.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (accId !== undefined && accId !== null) {
            queryParameters = queryParameters.set('accId', <any>accId);
        }
        if (budgetId !== undefined && budgetId !== null) {
            queryParameters = queryParameters.set('budgetId', <any>budgetId);
        }
        if (value !== undefined && value !== null) {
            queryParameters = queryParameters.set('value', <any>value);
        }
        if (transactiondate !== undefined && transactiondate !== null) {
            queryParameters = queryParameters.set('transactiondate', <any>transactiondate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/addIncomeExpense`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * save Income or Expense linked to an additional account
     * 
     * @param envID The Service Environment
     * @param description description
     * @param accId the accountId of the income or expense
     * @param linkedAccId the linked accountId of the income or expense
     * @param budgetId the budgetId of the income or expense
     * @param value the value of the income or expense
     * @param transactiondate the transactiondate(yyyy-mm-dd
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addLinkedIncomeExpense_envID_description_accId_linkedAccId_budgetId_value_transactiondate(envID: string, description?: string, accId?: number, linkedAccId?: number, budgetId?: number, value?: number, transactiondate?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addLinkedIncomeExpense_envID_description_accId_linkedAccId_budgetId_value_transactiondate(envID: string, description?: string, accId?: number, linkedAccId?: number, budgetId?: number, value?: number, transactiondate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addLinkedIncomeExpense_envID_description_accId_linkedAccId_budgetId_value_transactiondate(envID: string, description?: string, accId?: number, linkedAccId?: number, budgetId?: number, value?: number, transactiondate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addLinkedIncomeExpense_envID_description_accId_linkedAccId_budgetId_value_transactiondate(envID: string, description?: string, accId?: number, linkedAccId?: number, budgetId?: number, value?: number, transactiondate?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling addLinkedIncomeExpense_envID_description_accId_linkedAccId_budgetId_value_transactiondate.');
        }







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (accId !== undefined && accId !== null) {
            queryParameters = queryParameters.set('accId', <any>accId);
        }
        if (linkedAccId !== undefined && linkedAccId !== null) {
            queryParameters = queryParameters.set('linkedAccId', <any>linkedAccId);
        }
        if (budgetId !== undefined && budgetId !== null) {
            queryParameters = queryParameters.set('budgetId', <any>budgetId);
        }
        if (value !== undefined && value !== null) {
            queryParameters = queryParameters.set('value', <any>value);
        }
        if (transactiondate !== undefined && transactiondate !== null) {
            queryParameters = queryParameters.set('transactiondate', <any>transactiondate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/addLinkedIncomeExpense`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * save Price
     * 
     * @param envID The Service Environment
     * @param currencyCode the currencyCode
     * @param isin the isin
     * @param dayofprice the dayofprice(yyyy-mm-dd
     * @param value value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addPrice_envID_currencyCode_isin_dayofprice_value(envID: string, currencyCode?: string, isin?: string, dayofprice?: string, value?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addPrice_envID_currencyCode_isin_dayofprice_value(envID: string, currencyCode?: string, isin?: string, dayofprice?: string, value?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addPrice_envID_currencyCode_isin_dayofprice_value(envID: string, currencyCode?: string, isin?: string, dayofprice?: string, value?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addPrice_envID_currencyCode_isin_dayofprice_value(envID: string, currencyCode?: string, isin?: string, dayofprice?: string, value?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling addPrice_envID_currencyCode_isin_dayofprice_value.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (currencyCode !== undefined && currencyCode !== null) {
            queryParameters = queryParameters.set('currencyCode', <any>currencyCode);
        }
        if (isin !== undefined && isin !== null) {
            queryParameters = queryParameters.set('isin', <any>isin);
        }
        if (dayofprice !== undefined && dayofprice !== null) {
            queryParameters = queryParameters.set('dayofprice', <any>dayofprice);
        }
        if (value !== undefined && value !== null) {
            queryParameters = queryParameters.set('value', <any>value);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/addPrice`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * save Realestate
     * 
     * @param envID The Service Environment
     * @param description description
     * @param tenantId the Id of the tenant which the realestate is attached to
     * @param valueBudgetId the budget to add the value of the realestate
     * @param yieldgoal all yieldgoals with valid from date
     * @param realEstateProfit all realEstateProfits with valid from date
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addRealestate_envID_description_tenantId_valueBudgetId_yieldgoal_realEstateProfit(envID: string, description?: string, tenantId?: number, valueBudgetId?: number, yieldgoal?: Array<string>, realEstateProfit?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addRealestate_envID_description_tenantId_valueBudgetId_yieldgoal_realEstateProfit(envID: string, description?: string, tenantId?: number, valueBudgetId?: number, yieldgoal?: Array<string>, realEstateProfit?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addRealestate_envID_description_tenantId_valueBudgetId_yieldgoal_realEstateProfit(envID: string, description?: string, tenantId?: number, valueBudgetId?: number, yieldgoal?: Array<string>, realEstateProfit?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addRealestate_envID_description_tenantId_valueBudgetId_yieldgoal_realEstateProfit(envID: string, description?: string, tenantId?: number, valueBudgetId?: number, yieldgoal?: Array<string>, realEstateProfit?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling addRealestate_envID_description_tenantId_valueBudgetId_yieldgoal_realEstateProfit.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (tenantId !== undefined && tenantId !== null) {
            queryParameters = queryParameters.set('tenantId', <any>tenantId);
        }
        if (valueBudgetId !== undefined && valueBudgetId !== null) {
            queryParameters = queryParameters.set('valueBudgetId', <any>valueBudgetId);
        }
        if (yieldgoal) {
            yieldgoal.forEach((element) => {
                queryParameters = queryParameters.append('yieldgoal', <any>element);
            })
        }
        if (realEstateProfit) {
            realEstateProfit.forEach((element) => {
                queryParameters = queryParameters.append('realEstateProfit', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/addRealestate`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * save RecurrentTransfer
     * 
     * @param envID The Service Environment
     * @param description description
     * @param srcId the instrumentId of the source
     * @param trgId the instrumentId of the target
     * @param recurrentFrequency the frequency of the recurrent transaction
     * @param value the value of the income or expense
     * @param transactiondate the transactiondate(yyyy-mm-dd
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addRecurrentTransfer_envID_description_srcId_trgId_recurrentFrequency_value_transactiondate(envID: string, description?: string, srcId?: number, trgId?: number, recurrentFrequency?: 'Monthly' | 'Quaterly' | 'Yearly' | 'UNKNOWN', value?: number, transactiondate?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addRecurrentTransfer_envID_description_srcId_trgId_recurrentFrequency_value_transactiondate(envID: string, description?: string, srcId?: number, trgId?: number, recurrentFrequency?: 'Monthly' | 'Quaterly' | 'Yearly' | 'UNKNOWN', value?: number, transactiondate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addRecurrentTransfer_envID_description_srcId_trgId_recurrentFrequency_value_transactiondate(envID: string, description?: string, srcId?: number, trgId?: number, recurrentFrequency?: 'Monthly' | 'Quaterly' | 'Yearly' | 'UNKNOWN', value?: number, transactiondate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addRecurrentTransfer_envID_description_srcId_trgId_recurrentFrequency_value_transactiondate(envID: string, description?: string, srcId?: number, trgId?: number, recurrentFrequency?: 'Monthly' | 'Quaterly' | 'Yearly' | 'UNKNOWN', value?: number, transactiondate?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling addRecurrentTransfer_envID_description_srcId_trgId_recurrentFrequency_value_transactiondate.');
        }







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (srcId !== undefined && srcId !== null) {
            queryParameters = queryParameters.set('srcId', <any>srcId);
        }
        if (trgId !== undefined && trgId !== null) {
            queryParameters = queryParameters.set('trgId', <any>trgId);
        }
        if (recurrentFrequency !== undefined && recurrentFrequency !== null) {
            queryParameters = queryParameters.set('recurrentFrequency', <any>recurrentFrequency);
        }
        if (value !== undefined && value !== null) {
            queryParameters = queryParameters.set('value', <any>value);
        }
        if (transactiondate !== undefined && transactiondate !== null) {
            queryParameters = queryParameters.set('transactiondate', <any>transactiondate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/addRecurrentTransfer`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * save Instrument
     * 
     * @param envID The Service Environment
     * @param isin the isin
     * @param symbol symbol
     * @param currencycode the code of the currency in which the security is traded in the exchange referenced by the symbol
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addSymbol_envID_isin_symbol_currencycode(envID: string, isin?: string, symbol?: string, currencycode?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addSymbol_envID_isin_symbol_currencycode(envID: string, isin?: string, symbol?: string, currencycode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addSymbol_envID_isin_symbol_currencycode(envID: string, isin?: string, symbol?: string, currencycode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addSymbol_envID_isin_symbol_currencycode(envID: string, isin?: string, symbol?: string, currencycode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling addSymbol_envID_isin_symbol_currencycode.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (isin !== undefined && isin !== null) {
            queryParameters = queryParameters.set('isin', <any>isin);
        }
        if (symbol !== undefined && symbol !== null) {
            queryParameters = queryParameters.set('symbol', <any>symbol);
        }
        if (currencycode !== undefined && currencycode !== null) {
            queryParameters = queryParameters.set('currencycode', <any>currencycode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/addSymbol`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * save Tenant
     * 
     * @param envID The Service Environment
     * @param description description
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addTenant_envID_description(envID: string, description?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addTenant_envID_description(envID: string, description?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addTenant_envID_description(envID: string, description?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addTenant_envID_description(envID: string, description?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling addTenant_envID_description.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/addTenant`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * save Transfer or BudgetTransfer
     * 
     * @param envID The Service Environment
     * @param description description
     * @param srcId the instrumentId of the source
     * @param trgId the instrumentId of the target
     * @param value the value of the income or expense
     * @param transactiondate the transactiondate(yyyy-mm-dd
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addTransfer_envID_description_srcId_trgId_value_transactiondate(envID: string, description?: string, srcId?: number, trgId?: number, value?: number, transactiondate?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addTransfer_envID_description_srcId_trgId_value_transactiondate(envID: string, description?: string, srcId?: number, trgId?: number, value?: number, transactiondate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addTransfer_envID_description_srcId_trgId_value_transactiondate(envID: string, description?: string, srcId?: number, trgId?: number, value?: number, transactiondate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addTransfer_envID_description_srcId_trgId_value_transactiondate(envID: string, description?: string, srcId?: number, trgId?: number, value?: number, transactiondate?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling addTransfer_envID_description_srcId_trgId_value_transactiondate.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (srcId !== undefined && srcId !== null) {
            queryParameters = queryParameters.set('srcId', <any>srcId);
        }
        if (trgId !== undefined && trgId !== null) {
            queryParameters = queryParameters.set('trgId', <any>trgId);
        }
        if (value !== undefined && value !== null) {
            queryParameters = queryParameters.set('value', <any>value);
        }
        if (transactiondate !== undefined && transactiondate !== null) {
            queryParameters = queryParameters.set('transactiondate', <any>transactiondate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/addTransfer`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * bookRecurrentTransactions
     * 
     * @param envID The Service Environment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public bookRecurrentTransactions_envID(envID: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public bookRecurrentTransactions_envID(envID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public bookRecurrentTransactions_envID(envID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public bookRecurrentTransactions_envID(envID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling bookRecurrentTransactions_envID.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/bookRecurrentTransactions`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * delete Recurrent Transfer
     * 
     * @param envID The Service Environment
     * @param recurrentTransactionId recurrentTransactionId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public delRecurrentTransfer_envID_recurrentTransactionId(envID: string, recurrentTransactionId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public delRecurrentTransfer_envID_recurrentTransactionId(envID: string, recurrentTransactionId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public delRecurrentTransfer_envID_recurrentTransactionId(envID: string, recurrentTransactionId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public delRecurrentTransfer_envID_recurrentTransactionId(envID: string, recurrentTransactionId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling delRecurrentTransfer_envID_recurrentTransactionId.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (recurrentTransactionId !== undefined && recurrentTransactionId !== null) {
            queryParameters = queryParameters.set('recurrentTransactionId', <any>recurrentTransactionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/delRecurrentTransfer`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * delete Transfer
     * 
     * @param envID The Service Environment
     * @param transactionId transactionId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public delTransfer_envID_transactionId(envID: string, transactionId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public delTransfer_envID_transactionId(envID: string, transactionId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public delTransfer_envID_transactionId(envID: string, transactionId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public delTransfer_envID_transactionId(envID: string, transactionId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling delTransfer_envID_transactionId.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (transactionId !== undefined && transactionId !== null) {
            queryParameters = queryParameters.set('transactionId', <any>transactionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/delTransfer`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * fillpricehistory
     * 
     * @param envID The Service Environment
     * @param sourceId the sourceId
     * @param isin the isin
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fillPricesHistory_envID_sourceId_isin(envID: string, sourceId?: number, isin?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fillPricesHistory_envID_sourceId_isin(envID: string, sourceId?: number, isin?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fillPricesHistory_envID_sourceId_isin(envID: string, sourceId?: number, isin?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fillPricesHistory_envID_sourceId_isin(envID: string, sourceId?: number, isin?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling fillPricesHistory_envID_sourceId_isin.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sourceId !== undefined && sourceId !== null) {
            queryParameters = queryParameters.set('sourceId', <any>sourceId);
        }
        if (isin !== undefined && isin !== null) {
            queryParameters = queryParameters.set('isin', <any>isin);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/fillpricehistory`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Map Data
     * 
     * @param tenantId the tenantId
     * @param envID The Service Environment
     * @param date date in Format yyyy-mm-dd
     * @param diffdate date for value diff in Format yyyy-mm-dd
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAccountValueTupleMap_tenantId_envID_date_diffdate(tenantId: number, envID: string, date?: string, diffdate?: string, observe?: 'body', reportProgress?: boolean): Observable<InstrumentDetailModel>;
    public getAccountValueTupleMap_tenantId_envID_date_diffdate(tenantId: number, envID: string, date?: string, diffdate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InstrumentDetailModel>>;
    public getAccountValueTupleMap_tenantId_envID_date_diffdate(tenantId: number, envID: string, date?: string, diffdate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InstrumentDetailModel>>;
    public getAccountValueTupleMap_tenantId_envID_date_diffdate(tenantId: number, envID: string, date?: string, diffdate?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling getAccountValueTupleMap_tenantId_envID_date_diffdate.');
        }

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling getAccountValueTupleMap_tenantId_envID_date_diffdate.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (date !== undefined && date !== null) {
            queryParameters = queryParameters.set('date', <any>date);
        }
        if (diffdate !== undefined && diffdate !== null) {
            queryParameters = queryParameters.set('diffdate', <any>diffdate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InstrumentDetailModel>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/getinstrumentvalues/${encodeURIComponent(String(tenantId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List Data
     * 
     * @param envID The Service Environment
     * @param tenant tenant id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getActiveInstrumentForTenantList_envID_tenant(envID: string, tenant?: number, observe?: 'body', reportProgress?: boolean): Observable<InstrumentListModel>;
    public getActiveInstrumentForTenantList_envID_tenant(envID: string, tenant?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InstrumentListModel>>;
    public getActiveInstrumentForTenantList_envID_tenant(envID: string, tenant?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InstrumentListModel>>;
    public getActiveInstrumentForTenantList_envID_tenant(envID: string, tenant?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling getActiveInstrumentForTenantList_envID_tenant.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tenant !== undefined && tenant !== null) {
            queryParameters = queryParameters.set('tenant', <any>tenant);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InstrumentListModel>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/activeinstrumentsfortenant`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List Environments
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEnvironmentList(observe?: 'body', reportProgress?: boolean): Observable<StringListModel>;
    public getEnvironmentList(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StringListModel>>;
    public getEnvironmentList(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StringListModel>>;
    public getEnvironmentList(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<StringListModel>(`${this.basePath}/myfinance/environments/list`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get Data
     * 
     * @param envID The Service Environment
     * @param budgetGroup budgetGroup id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIncomeBudget_envID_budgetGroup(envID: string, budgetGroup?: number, observe?: 'body', reportProgress?: boolean): Observable<InstrumentModel>;
    public getIncomeBudget_envID_budgetGroup(envID: string, budgetGroup?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InstrumentModel>>;
    public getIncomeBudget_envID_budgetGroup(envID: string, budgetGroup?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InstrumentModel>>;
    public getIncomeBudget_envID_budgetGroup(envID: string, budgetGroup?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling getIncomeBudget_envID_budgetGroup.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (budgetGroup !== undefined && budgetGroup !== null) {
            queryParameters = queryParameters.set('budgetGroup', <any>budgetGroup);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InstrumentModel>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/incomebudgetforbudgetgroup`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List Data
     * 
     * @param envID The Service Environment
     * @param tenant tenant id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInstrumentForTenantList_envID_tenant(envID: string, tenant?: number, observe?: 'body', reportProgress?: boolean): Observable<InstrumentListModel>;
    public getInstrumentForTenantList_envID_tenant(envID: string, tenant?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InstrumentListModel>>;
    public getInstrumentForTenantList_envID_tenant(envID: string, tenant?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InstrumentListModel>>;
    public getInstrumentForTenantList_envID_tenant(envID: string, tenant?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling getInstrumentForTenantList_envID_tenant.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tenant !== undefined && tenant !== null) {
            queryParameters = queryParameters.set('tenant', <any>tenant);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InstrumentListModel>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/instrumentsfortenant`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List Data
     * 
     * @param envID The Service Environment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInstrumentList_envID(envID: string, observe?: 'body', reportProgress?: boolean): Observable<InstrumentListModel>;
    public getInstrumentList_envID(envID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InstrumentListModel>>;
    public getInstrumentList_envID(envID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InstrumentListModel>>;
    public getInstrumentList_envID(envID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling getInstrumentList_envID.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InstrumentListModel>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/instruments`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List Data
     * 
     * @param envID The Service Environment
     * @param tenant tenant id
     * @param instrumenttype instrumenttype
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInstrumentPerTypeList_envID_tenant_instrumenttype(envID: string, tenant?: number, instrumenttype?: 'GIRO' | 'MONEYATCALL' | 'TIMEDEPOSIT' | 'BUILDINGSAVINGACCOUNT' | 'BUDGET' | 'TENANT' | 'ACCOUNTPORTFOLIO' | 'ARTIFICALPORTFOLIO' | 'BUDGETGROUP' | 'DEPOT' | 'BUILDINGSAVING' | 'CURRENCY' | 'EQUITY' | 'FONDS' | 'ETF' | 'INDEX' | 'BOND' | 'LIFEINSURANCE' | 'DEPRECATIONOBJECT' | 'REALESTATE' | 'LOAN' | 'BUDGETPORTFOLIO' | 'UNKNOWN', observe?: 'body', reportProgress?: boolean): Observable<InstrumentListModel>;
    public getInstrumentPerTypeList_envID_tenant_instrumenttype(envID: string, tenant?: number, instrumenttype?: 'GIRO' | 'MONEYATCALL' | 'TIMEDEPOSIT' | 'BUILDINGSAVINGACCOUNT' | 'BUDGET' | 'TENANT' | 'ACCOUNTPORTFOLIO' | 'ARTIFICALPORTFOLIO' | 'BUDGETGROUP' | 'DEPOT' | 'BUILDINGSAVING' | 'CURRENCY' | 'EQUITY' | 'FONDS' | 'ETF' | 'INDEX' | 'BOND' | 'LIFEINSURANCE' | 'DEPRECATIONOBJECT' | 'REALESTATE' | 'LOAN' | 'BUDGETPORTFOLIO' | 'UNKNOWN', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InstrumentListModel>>;
    public getInstrumentPerTypeList_envID_tenant_instrumenttype(envID: string, tenant?: number, instrumenttype?: 'GIRO' | 'MONEYATCALL' | 'TIMEDEPOSIT' | 'BUILDINGSAVINGACCOUNT' | 'BUDGET' | 'TENANT' | 'ACCOUNTPORTFOLIO' | 'ARTIFICALPORTFOLIO' | 'BUDGETGROUP' | 'DEPOT' | 'BUILDINGSAVING' | 'CURRENCY' | 'EQUITY' | 'FONDS' | 'ETF' | 'INDEX' | 'BOND' | 'LIFEINSURANCE' | 'DEPRECATIONOBJECT' | 'REALESTATE' | 'LOAN' | 'BUDGETPORTFOLIO' | 'UNKNOWN', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InstrumentListModel>>;
    public getInstrumentPerTypeList_envID_tenant_instrumenttype(envID: string, tenant?: number, instrumenttype?: 'GIRO' | 'MONEYATCALL' | 'TIMEDEPOSIT' | 'BUILDINGSAVINGACCOUNT' | 'BUDGET' | 'TENANT' | 'ACCOUNTPORTFOLIO' | 'ARTIFICALPORTFOLIO' | 'BUDGETGROUP' | 'DEPOT' | 'BUILDINGSAVING' | 'CURRENCY' | 'EQUITY' | 'FONDS' | 'ETF' | 'INDEX' | 'BOND' | 'LIFEINSURANCE' | 'DEPRECATIONOBJECT' | 'REALESTATE' | 'LOAN' | 'BUDGETPORTFOLIO' | 'UNKNOWN', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling getInstrumentPerTypeList_envID_tenant_instrumenttype.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tenant !== undefined && tenant !== null) {
            queryParameters = queryParameters.set('tenant', <any>tenant);
        }
        if (instrumenttype !== undefined && instrumenttype !== null) {
            queryParameters = queryParameters.set('instrumenttype', <any>instrumenttype);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InstrumentListModel>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/instrumentspertype`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List Data
     * 
     * @param envID The Service Environment
     * @param instrumentid instrument id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInstrumentPropertyList_envID_instrumentid(envID: string, instrumentid?: number, observe?: 'body', reportProgress?: boolean): Observable<InstrumentPropertyListModel>;
    public getInstrumentPropertyList_envID_instrumentid(envID: string, instrumentid?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InstrumentPropertyListModel>>;
    public getInstrumentPropertyList_envID_instrumentid(envID: string, instrumentid?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InstrumentPropertyListModel>>;
    public getInstrumentPropertyList_envID_instrumentid(envID: string, instrumentid?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling getInstrumentPropertyList_envID_instrumentid.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (instrumentid !== undefined && instrumentid !== null) {
            queryParameters = queryParameters.set('instrumentid', <any>instrumentid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InstrumentPropertyListModel>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/instrumentsproperties`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get Data
     * 
     * @param envID The Service Environment
     * @param isin the isin
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInstrument_envID_isin(envID: string, isin?: string, observe?: 'body', reportProgress?: boolean): Observable<InstrumentModel>;
    public getInstrument_envID_isin(envID: string, isin?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InstrumentModel>>;
    public getInstrument_envID_isin(envID: string, isin?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InstrumentModel>>;
    public getInstrument_envID_isin(envID: string, isin?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling getInstrument_envID_isin.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (isin !== undefined && isin !== null) {
            queryParameters = queryParameters.set('isin', <any>isin);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InstrumentModel>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/getequity`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List Data
     * 
     * @param envID The Service Environment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRecurrentTransactionList_envID(envID: string, observe?: 'body', reportProgress?: boolean): Observable<RecurrentTransactionListModel>;
    public getRecurrentTransactionList_envID(envID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RecurrentTransactionListModel>>;
    public getRecurrentTransactionList_envID(envID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RecurrentTransactionListModel>>;
    public getRecurrentTransactionList_envID(envID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling getRecurrentTransactionList_envID.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<RecurrentTransactionListModel>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/listRecurrentTransactions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List Data
     * 
     * @param envID The Service Environment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTenantList_envID(envID: string, observe?: 'body', reportProgress?: boolean): Observable<InstrumentListModel>;
    public getTenantList_envID(envID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InstrumentListModel>>;
    public getTenantList_envID(envID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InstrumentListModel>>;
    public getTenantList_envID(envID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling getTenantList_envID.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InstrumentListModel>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/listTenants`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List Data
     * 
     * @param envID The Service Environment
     * @param startdate startdate in Format yyyy-mm-dd
     * @param enddate enddate in Format yyyy-mm-dd
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTransactionList_envID_startdate_enddate(envID: string, startdate?: string, enddate?: string, observe?: 'body', reportProgress?: boolean): Observable<TransactionListModel>;
    public getTransactionList_envID_startdate_enddate(envID: string, startdate?: string, enddate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TransactionListModel>>;
    public getTransactionList_envID_startdate_enddate(envID: string, startdate?: string, enddate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TransactionListModel>>;
    public getTransactionList_envID_startdate_enddate(envID: string, startdate?: string, enddate?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling getTransactionList_envID_startdate_enddate.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startdate !== undefined && startdate !== null) {
            queryParameters = queryParameters.set('startdate', <any>startdate);
        }
        if (enddate !== undefined && enddate !== null) {
            queryParameters = queryParameters.set('enddate', <any>enddate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TransactionListModel>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/listTransactions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Map Data
     * 
     * @param instrumentId the instrumentId
     * @param envID The Service Environment
     * @param startdate startdate in Format yyyy-mm-dd
     * @param enddate enddate in Format yyyy-mm-dd
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getValueMap_instrumentId_envID_startdate_enddate(instrumentId: number, envID: string, startdate?: string, enddate?: string, observe?: 'body', reportProgress?: boolean): Observable<DateDoubleModel>;
    public getValueMap_instrumentId_envID_startdate_enddate(instrumentId: number, envID: string, startdate?: string, enddate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DateDoubleModel>>;
    public getValueMap_instrumentId_envID_startdate_enddate(instrumentId: number, envID: string, startdate?: string, enddate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DateDoubleModel>>;
    public getValueMap_instrumentId_envID_startdate_enddate(instrumentId: number, envID: string, startdate?: string, enddate?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (instrumentId === null || instrumentId === undefined) {
            throw new Error('Required parameter instrumentId was null or undefined when calling getValueMap_instrumentId_envID_startdate_enddate.');
        }

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling getValueMap_instrumentId_envID_startdate_enddate.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startdate !== undefined && startdate !== null) {
            queryParameters = queryParameters.set('startdate', <any>startdate);
        }
        if (enddate !== undefined && enddate !== null) {
            queryParameters = queryParameters.set('enddate', <any>enddate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DateDoubleModel>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/getvaluecurve/${encodeURIComponent(String(instrumentId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * importprices
     * 
     * @param envID The Service Environment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public importPrices_envID(envID: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public importPrices_envID(envID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public importPrices_envID(envID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public importPrices_envID(envID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling importPrices_envID.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/importprices`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * remove symbols
     * 
     * @param envID The Service Environment
     * @param isin the isin
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rmSymbols_envID_isin(envID: string, isin?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public rmSymbols_envID_isin(envID: string, isin?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public rmSymbols_envID_isin(envID: string, isin?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public rmSymbols_envID_isin(envID: string, isin?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling rmSymbols_envID_isin.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (isin !== undefined && isin !== null) {
            queryParameters = queryParameters.set('isin', <any>isin);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/rmSymbols`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update Instrument
     * 
     * @param envID The Service Environment
     * @param id id
     * @param description description
     * @param isactive isactive
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateInstrument_envID_id_description_isactive(envID: string, id?: number, description?: string, isactive?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateInstrument_envID_id_description_isactive(envID: string, id?: number, description?: string, isactive?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateInstrument_envID_id_description_isactive(envID: string, id?: number, description?: string, isactive?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateInstrument_envID_id_description_isactive(envID: string, id?: number, description?: string, isactive?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling updateInstrument_envID_id_description_isactive.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (isactive !== undefined && isactive !== null) {
            queryParameters = queryParameters.set('isactive', <any>isactive);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/updateInstrument`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update Realestate
     * 
     * @param envID The Service Environment
     * @param realestateIdId the Id of the RealEstate
     * @param description description
     * @param yieldgoal all yieldgoals with valid from date
     * @param realEstateProfit all realEstateProfits with valid from date
     * @param isactive isactive
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateRealestate_envID_realestateIdId_description_yieldgoal_realEstateProfit_isactive(envID: string, realestateIdId?: number, description?: string, yieldgoal?: Array<string>, realEstateProfit?: Array<string>, isactive?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateRealestate_envID_realestateIdId_description_yieldgoal_realEstateProfit_isactive(envID: string, realestateIdId?: number, description?: string, yieldgoal?: Array<string>, realEstateProfit?: Array<string>, isactive?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateRealestate_envID_realestateIdId_description_yieldgoal_realEstateProfit_isactive(envID: string, realestateIdId?: number, description?: string, yieldgoal?: Array<string>, realEstateProfit?: Array<string>, isactive?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateRealestate_envID_realestateIdId_description_yieldgoal_realEstateProfit_isactive(envID: string, realestateIdId?: number, description?: string, yieldgoal?: Array<string>, realEstateProfit?: Array<string>, isactive?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling updateRealestate_envID_realestateIdId_description_yieldgoal_realEstateProfit_isactive.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (realestateIdId !== undefined && realestateIdId !== null) {
            queryParameters = queryParameters.set('realestateIdId', <any>realestateIdId);
        }
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (yieldgoal) {
            yieldgoal.forEach((element) => {
                queryParameters = queryParameters.append('yieldgoal', <any>element);
            })
        }
        if (realEstateProfit) {
            realEstateProfit.forEach((element) => {
                queryParameters = queryParameters.append('realEstateProfit', <any>element);
            })
        }
        if (isactive !== undefined && isactive !== null) {
            queryParameters = queryParameters.set('isactive', <any>isactive);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/updateRealestate`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update recurrent Transaction
     * 
     * @param envID The Service Environment
     * @param id id
     * @param description description
     * @param value the value of the income or expense
     * @param nexttransaction the transactiondate(yyyy-mm-dd
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateRecurrentTransaction_envID_id_description_value_nexttransaction(envID: string, id?: number, description?: string, value?: number, nexttransaction?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateRecurrentTransaction_envID_id_description_value_nexttransaction(envID: string, id?: number, description?: string, value?: number, nexttransaction?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateRecurrentTransaction_envID_id_description_value_nexttransaction(envID: string, id?: number, description?: string, value?: number, nexttransaction?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateRecurrentTransaction_envID_id_description_value_nexttransaction(envID: string, id?: number, description?: string, value?: number, nexttransaction?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling updateRecurrentTransaction_envID_id_description_value_nexttransaction.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (value !== undefined && value !== null) {
            queryParameters = queryParameters.set('value', <any>value);
        }
        if (nexttransaction !== undefined && nexttransaction !== null) {
            queryParameters = queryParameters.set('nexttransaction', <any>nexttransaction);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/updateRecurrentTransaction`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update Transaction
     * 
     * @param envID The Service Environment
     * @param id id
     * @param description description
     * @param value the value of the income or expense
     * @param transactiondate the transactiondate(yyyy-mm-dd
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTransaction_envID_id_description_value_transactiondate(envID: string, id?: number, description?: string, value?: number, transactiondate?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateTransaction_envID_id_description_value_transactiondate(envID: string, id?: number, description?: string, value?: number, transactiondate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateTransaction_envID_id_description_value_transactiondate(envID: string, id?: number, description?: string, value?: number, transactiondate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateTransaction_envID_id_description_value_transactiondate(envID: string, id?: number, description?: string, value?: number, transactiondate?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (envID === null || envID === undefined) {
            throw new Error('Required parameter envID was null or undefined when calling updateTransaction_envID_id_description_value_transactiondate.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (value !== undefined && value !== null) {
            queryParameters = queryParameters.set('value', <any>value);
        }
        if (transactiondate !== undefined && transactiondate !== null) {
            queryParameters = queryParameters.set('transactiondate', <any>transactiondate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/myfinance/environments/${encodeURIComponent(String(envID))}/updateTransaction`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
